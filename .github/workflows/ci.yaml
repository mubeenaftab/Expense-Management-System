name: CI and Dev Deploy
on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Install dependencies
      run: pip install pre-commit
    - name: Run pre-commit hooks
      run: pre-commit run --all-files

  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Setup environmental variables
      run: |
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "ALGORITHM=${{ secrets.ALGORITHM }}" >> .env
          echo "ALLOWED_ORIGINS=${{ secrets.ALLOWED_ORIGINS }}" >> .env
          echo "IS_ALLOWED_CREDENTIALS=${{ secrets.IS_ALLOWED_CREDENTIALS }}" >> .env
          echo "ALLOWED_METHODS=${{ secrets.ALLOWED_METHODS }}" >> .env
          echo "ALLOWED_HEADERS=${{ secrets.ALLOWED_HEADERS }}" >> .env
          echo "TEST_DATABASE_URL=${{ secrets.TEST_DATABASE_URL }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        cd backend
    - name: Run tests with pytest
      run: |
        cd backend
        TEST_DATABASE_URL=sqlite+aiosqlite:///:memory: pytest

  deploy:
    name: Deploy Backend to Fly.io
    needs: [pre-commit, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy --remote-only --config fly.dev.toml
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
